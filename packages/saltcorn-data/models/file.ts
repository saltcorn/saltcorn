/**
 * File Database Access Layer
 * @category saltcorn-data
 * @module models/file
 * @subcategory models
 */

import db from "../db";
import { v4 as uuidv4 } from "uuid";
import { join } from "path";
const { asyncMap } = require("../utils");
import { mkdir, unlink } from "fs/promises";
import type { Where, SelectOptions, Row } from "@saltcorn/db-common/internal";

/**
 * File Descriptor class
 *
 * Architecture tips:
 * 1. Physically Saltcorn stores files on local filesystem of the server, where Saltcorn runs.
 * 2. The path to file store is defined in db.connectObj.file_store.
 * 3. List of files stored in _sc_files table in Saltcorn database.
 * 4. Each tenant has own file list and file storage.
 * 5. This class provides file descriptor and basic functions to manipulate with files.
 * @category saltcorn-data
 */
class File {
  filename: string;
  location: string;
  mime_super: string;
  mime_sub: string;
  uploaded_at: Date;
  size_kb: number;
  id?: number;
  user_id?: number;
  min_role_read: number;
  s3_store: boolean;

  /**
   * Constructor
   * @param o {object}
   */
  constructor(o: FileCfg) {
    this.filename = o.filename;
    this.location = o.location;
    this.uploaded_at =
      typeof o.uploaded_at === "string" || typeof o.uploaded_at === "number"
        ? new Date(o.uploaded_at)
        : o.uploaded_at;
    this.size_kb = o.size_kb;
    this.id = o.id;
    this.user_id = o.user_id;
    this.mime_super = o.mime_super;
    this.mime_sub = o.mime_sub;
    this.min_role_read = o.min_role_read;
    this.s3_store = !!o.s3_store;
    // TBD add checksum this.checksum = o.checksum;
  }

  /**
   * Select list of file descriptors
   * @param where
   * @param selectopts
   * @returns {Promise<*>}
   */
  static async find(
    where: Where,
    selectopts: SelectOptions = {}
  ): Promise<Array<File>> {
    if (selectopts.cached) {
      const { getState } = require("../db/state");
      // TODO ch migrate State and replace any
      const files = Object.values(getState().files).sort((a: any, b: any) =>
        a.filename > b.filename ? 1 : -1
      );
      return files.map((t: any) => new File(t));
    }
    const db_flds = await db.select("_sc_files", where, selectopts);
    return db_flds.map((dbf: FileCfg) => new File(dbf));
  }

  /**
   * Select one file descriptor
   *
   * @param where
   * @returns {Promise<File|null>}
   */
  static async findOne(where: Where): Promise<File | null> {
    if (where.id) {
      const { getState } = require("../db/state");
      const cf = getState().files[+where.id];
      if (cf) return new File(cf);
    }
    const f = await db.selectMaybeOne("_sc_files", where);
    return f ? new File(f) : null;
  }

  /**
   * Update File descriptor
   *
   * @param id - primary key
   * @param row - row data
   * @returns {Promise<void>} no returns
   */
  static async update(id: number, row: Row): Promise<void> {
    await db.update("_sc_files", row, id);
    await require("../db/state").getState().refresh_files();
  }

  /**
   * Get absolute path to new file in db.connectObj.file_store.
   *
   * @param suggest - path to file inside file store. If undefined that autogenerated uudv4 is used.
   * @returns {string} - path to file
   */
  static get_new_path(suggest?: string): string {
    const { getState } = require("../db/state");

    // Check if it uses S3, then use a default "saltcorn" folder
    const useS3 = getState().getConfig("storage_s3_enabled");
    const file_store = !useS3 ? db.connectObj.file_store : "saltcorn/";

    const newFnm = suggest || uuidv4();
    const newPath = join(file_store, newFnm);
    return newPath;
  }

  /**
   * Ensure that file_store path is physically exists in file system.
   * In reality just recursively creates full absolute path to db.connectObj.file_store.
   *
   * @returns {Promise<void>}
   */
  // TBD fs errors handling
  static async ensure_file_store(): Promise<void> {
    const { getState } = require("../db/state");

    if (!getState().getConfig("storage_s3_enabled")) {
      const file_store = db.connectObj.file_store;
      await mkdir(file_store, { recursive: true });
    }
  }

  /**
   * Create new file
   * @param file
   * @param user_id
   * @param min_role_read
   * @returns {Promise<File>}
   */
  static async from_req_files(
    file: {
      mimetype: string;
      name: string;
      mv: Function;
      size: number;
      s3object?: boolean;
    },
    user_id: number,
    min_role_read: number = 1
  ): Promise<File> {
    if (Array.isArray(file)) {
      return await asyncMap(file, (f: any) =>
        File.from_req_files(f, user_id, min_role_read)
      );
    } else {
      // get path to file
      const newPath = File.get_new_path();
      // set mime type
      const [mime_super, mime_sub] = file.mimetype.split("/");
      // move file in file system to newPath
      await file.mv(newPath);
      // create file
      return await File.create({
        filename: file.name,
        location: newPath,
        uploaded_at: new Date(),
        size_kb: Math.round(file.size / 1024),
        user_id,
        mime_super,
        mime_sub,
        min_role_read,
        s3_store: !!file.s3object,
      });
    }
  }

  /**
   * Delete file
   * @returns {Promise<{error}>}
   */

  async delete(
    unlinker?: (arg0: File) => Promise<void>
  ): Promise<{ error: string } | void> {
    try {
      // delete file from database
      await db.deleteWhere("_sc_files", { id: this.id });
      // delete name and possible file from file system
      if (unlinker) await unlinker(this);
      else await unlink(this.location);
      if (db.reset_sequence) await db.reset_sequence("_sc_files");
      // reload file list cache
      await require("../db/state").getState().refresh_files();
    } catch (e: any) {
      return { error: e.message };
    }
  }

  /**
   * MIME type of the file
   * @type {string}
   */
  get mimetype(): string {
    return `${this.mime_super}/${this.mime_sub}`;
  }

  /**
   * Create file
   * @param f
   * @returns {Promise<File>}
   */
  static async create(f: FileCfg): Promise<File> {
    const file = new File(f);
    const { id, ...rest } = file;
    // insert file descriptor row to database
    file.id = await db.insert("_sc_files", rest);
    // refresh file list cache
    await require("../db/state").getState().refresh_files();

    return file;
  }
}

namespace File {
  export type FileCfg = {
    filename: string;
    location: string;
    uploaded_at: string | number | Date;
    size_kb: number;
    id?: number;
    user_id?: number;
    mime_super: string;
    mime_sub: string;
    min_role_read: number;
    s3_store?: boolean;
  };
}
type FileCfg = File.FileCfg;

export = File;
